import random

def MakeProfile(Strings,t):

    Profile = {"A":[1]*len(Strings[0]),"C":[1]*len(Strings[0]),"G":[1]*len(Strings[0]),"T":[1]*len(Strings[0])}
    for j in range(len(Strings[0])):
        for i in range(t):
            if Strings[i][j] == "A":
                Profile["A"][j] += 1
            if Strings[i][j] == "C":
                Profile["C"][j] +=1
            if Strings[i][j] == "G":
                Profile["G"][j] += 1
            if Strings[i][j] == "T":
                Profile["T"][j] +=1
    return Profile

def StrProb(Pattern , Profile):
    prob = 1
    for i in range(len(Pattern)):

        prob = prob* Profile[Pattern[i]][i]
    return prob


def MakeMotifs(Profile,DNA,t,k):
    Motifs = ["" for l in range(t)]
    n = len(DNA[0])
    counter = 0
    for s in DNA:
        Probability = 0
        for j in range(n-k+1):
            CandidPattern = s[j:j+k]
            if StrProb(CandidPattern,Profile) > Probability:
                Probability = StrProb(CandidPattern,Profile)
                Motifs[counter] = CandidPattern
        counter += 1
    return Motifs


def Score(Motifs,t):
    profile = MakeProfile(Motifs,t)
    profileZiped = list(zip(profile["A"],profile["C"],profile["G"],profile["T"]))
    Sum = 0
    for i in range(len(Motifs[0])):
        Sum = Sum + sum(profileZiped[i]) - max(profileZiped[i])
    return Sum


k = 15
t = 20
dna = """CTATCTATTGTGGCTAGGTTGCCTCCCTTTTCGAGGTCTGTTCACCAGAGCGACTACCCATATCATATCGTCCCGTTTCCCCTCGATTGGGTAAATCTAGCCCCCTATGACGCGCGAACCATCGCGCGAGCGCCTTATGCGGCACGAGAGGAGTGGCAGCTATCTATTGTGGCT
AGGTTGCCTCCCTTTTCGAGGTCTGTTCACCAGAGCGACTACCCATATCATATCGTCCCGTTTCCCCTCGATTGGGTAAATCTAGCCCCCTATGACGCGCGAACCATCGCGCGCCACTTAGCAAGTATAGCGCCTTATGCGGCACGAGAGGAGTGGCAGCTATCTATTGTGGCT
ACGTCATATTTACCTGTGGAGCTTTTTGATCGGCTTACGACGACCCTGGGATTCTCACCAAAGCCCAAGTATACTCTATTACAGTTGCTCGAATTCTACCGCGAATTGACCGAGGAGTGCAGGAGGATGTTAGCAGTAGCTAACTATCCGAGCACTCTAGCTAGAACTTAATTA
AAGGCGTGAGAATACGTCCAGGTTGCGGGTGCCCTAACAACTCACTGCTCCAAAAAGCAAGGTACGATATGTGGGGCTATACATACCTGCACGACTATCGCGAGCCGCAGGACGCGGACTCTGAGAAGGTTAGACCCTCAACGTGAGCGGGGTTATCTAAAGTAGCTCTTCCTA
TTCCGTCATAACTTTAAAGACGGCGGGTGTCTGAAGAGTTCTAGGCTGTTGTGGTGGACAGGTATAACTGCGAAGCCAAGCTGCAAGTATTGTGAGGGGAACCCTCATTCTAGTGACAATGTTATTTCTTCCCCACGCGTTTATACGGAAAGGCCCTAGTACTATTGGATCGAA
GCAACCGTTTGCCTGAGACGCTCCTTAACTCCATGCAGCACGCCCAGACACCATCTATTTCACTACTCTAAACTCAAGAATGGTATAAAAGCAAGTATGAGATCGGCCCCCTACGCGCTATACGCTGCTCAAAGAGGTACTGTCCCCCTCCAAATATAACAATATTATGGTATT
AGTCAATAACTTATCAATGTCCTCATCTAAATTTCGAGACTGATGACCACCATAGCTACCCCAAAAAGCTTCTATCGCTAGAACTTGGGGCCACCTGGCTGATTTTGCCTCTGGAAAAACCCAGCATATGGTAAGCCAAGATATGACATACGGGGCCGCGTCCTGTTACATTTG
CCGCCAAGCAAGTATCGTAAGGAAATAGACAGAATTTTGTTCCCCAAGCTCGGATCAGCTGCCAATCGCCCTACGGGGGCGGTTTTAGACCGTACGATAGCGTCCCAAGGTCGCGGATTGAAAGTGATAGGCGCTAGGTCAACTTACAAACGGATAGCTCATACCTATAAAATG
TTACCGAAATCCGATACGGGATTCAATGGGATTGGGCACCGGAGGAGGGAAAAGCTGCAGAATGAAAAAAAGCAAGTACTGACCTTTCAAAACCCTCTATAGCTGTTGGCAGTCACCTCTTCTTAGATCAGCGTCTCGCTCGTTTGAATTAAGCGTACATGATCTAGGGAATGG
CCGCCCAAACCTCAAGTATTTCTTCGAAGTAACTGACAGGTGCCTGCTGGCCCCTGTATGCTCGAACCGCCAGAATGCAAATGACCTGGACTCCGTATCCATTCTGTTACGACCATTTATATCCGCTTACCCACAAAGTGGCGATGTACCGTAGCATCCTGATTTCGATTATGT
TTAAGAGCCCGAGCCTCAGCCAAAAATAGAGTATGACCCGGTCTAGAAGATAGATTGTAAATTATTAAAGTCTTAGGTGAGTGGATTTAAGTTTAGCCGTAGCCTGGCCGGACTCTGGCTGTCTCCTTCCGCGGATAGTCGTCACACAAATTTAGTGGGTTGACATTTTTTTAA
CTCGCTTTCCTTCGGAGATTCGTGTGGTGCCTCCTCGCGGTGTCCTGGGGGTCGTGATTTGGGAATGGAAGGTTCTAACCCATCGAGCAAGTATGAGTACCCGCTAATGGTATTCGCTTTTACCAAGTTGATTTGATAATCACGAGACCTTTGCCTTACTTTTTAACATTGTGG
TAATGATCCTACGAGGGACTACATATGTGTTGGTTCTCCATTGAGCACTATGCTCACATGTCACATCCGGTTCTAGCGCGATCTGGCTGGAGGTTTCGCTAAACAACCATGGACTCCAAAATTGAAGTATCTTTACCGTGCATGACAAGATATCCAGATAGCCCGGCTCCCGAG
TGCATGCACCAAAAAGCAAAGCTATATGCTGTCGGGTGCTGAAGTCACAAGTTACAGATCCAGAAGAAGTTAAGTTTTACGTAAGTAAGGTAGACCGTTTTGAACATGGAGATTACCATGACGGCTCAAAGTATCGTCGCCGACCCAATGCACAGGCAAATCGTGCCAGCAGGG
CACGTAGCCGCAGGCCAGCAGGGACCTGAGGTACATAGAATTCCGATATAGATTGTGGGATTGCACGGAATCTTTAAAATAGTGCACTCTTTGGTGGTCGAGCAGGTCGATGTTTGTGCTAAAGGAGCGCAGGGGTGATTATACCAACCCGCAAGTATCTTTTCTCCCACGCAA
TAATTGTCCAGGAGGCCGCAACAGCCAGGGGTTAAGTAATACCTCCAAAAAGCAGAGATTATTGGCCAATTCATCAGCCCCAGTAGTGCCCACTCCGCAGGGCACGATCTATAATAGATTGGAATGGATATAAGGTACTCCTATCGGAGCGGCATAGTTGCCATATTTCAGCCA
CGAATCGGACTGGCTCTGCGTACTCCGATCGCGAGTCTTCAAAGCAAGTATGTCTCGAAACTACAACATAGGTAAGTACAAATTTTCCACTTTGTTTGCTATTTGTTGCTGTTCCGGACACAGTATAAGAACATTCATAGGGTCAATAGACCACAATTGTGTTGACACCAGCTG
CTTATAGGCGCTAAGTTTCGTAAACTGGGGTTAGTCCAGTCTCGAACTGGTCGCCAGGATGCAAAAGAATGGCTGGTTTCAACAACCTGAATACCGTGCCTGTCACAATACAAAAAGCAAGTGATTCAGCACCATGCTCAAATGGGATATGACCAAGGCCCAGGTGGTGGCGTT
GACTACAACACATTTGAAGTATAGAATGCGTCCGAAGTTCAACATGGGAAATCTGAACCAAAATCGAAGTATAATTCTTGGAGTGCACAATATAAGCTGTGTCTCGAGACTGACCCGTTATAGCTAGTAGTAAATAGCAATGGCATCATAAGTTAGCCTGCGAGATCTAGCCCA
GTCACTGAGCCGTGACTCTTGCGTTCTAGGTCCTCGGTGCCGTGATACGATACGCCTTTGATGGCCAGCGATCCATATATGATCGGCGACGCCCACTTGCTTTATTAGACCTGAGTTAACTTTTGGCGGTGTACTCGTTTCAGCCACCAAAAAGTGTGTATTTCCGTCGGGGCC"""
dna = dna.split("\n")
def main():


    Motifs = ["" for i in range(t)]
    for i in range(t):
        startIndex = random.randint(0, len(dna[0])-k)
        Motifs[i] = dna[i][startIndex:startIndex+k]
    BestMotifs = Motifs
    while 1:
        Profile = MakeProfile(Motifs,t)
        Motifs = MakeMotifs(Profile,dna,t,k)
        if Score(Motifs,t) < Score(BestMotifs,t):
            BestMotifs = Motifs
        else:
            return BestMotifs ,Score(BestMotifs,t)

BestMotifs = list()
Scores = list()
for i in range(1000):
    xMotif , xScores = main()
    BestMotifs.append(xMotif)
    Scores.append(xScores)

minIndex = Scores.index(min(Scores))
FinalMotifs = BestMotifs[minIndex]
for j in range(t):
    print(FinalMotifs[j])