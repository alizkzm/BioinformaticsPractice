import numpy as np

def lengthOfLcs(str1, str2):
    m = len(str1)
    n = len(str2)
    matrix = [[0] * (n + 1) for i in range(m + 1)]

    for i in range(m + 1):
        for j in range(n + 1):

            if i == 0 or j == 0:
                matrix[i][j] = 0

            elif str1[i - 1] == str2[j - 1]:
                matrix[i][j] = matrix[i - 1][j - 1] + 1

            else:
                matrix[i][j] = max(matrix[i - 1][j],
                                   matrix[i][j - 1])
    return matrix


def convert(s):
    # initialization of string to ""
    s = s[::-1]
    new = ""

    # traverse in the string
    for x in s:
        new += x

        # return string
    return new

def printLcs(str1,str2,str3):
    str =  ""
    string = [""]
    matrix = lengthOfLcs(str1,str2,str3)
    matrix = np.array(matrix)
    m = matrix.shape[0]
    n = matrix.shape[1]
    o = matrix.shape[2]
    i = m-1
    j = n-1
    k = o-1
    print(m,n,i,j)
    print(matrix.shape)
    while(i+j+k!=0):
        #print(matrix[i][(j)],matrix[i][(j-1)],matrix[i-1][(j)],matrix[i-1][j-1])
        '''
        if (matrix[i-1][j]==matrix[i-1][j]) and (matrix[i][j]==matrix[i][j-1]) and (matrix[i][j]==matrix[i-1][j-1]):
            string.append(str1[i-1])
            i-=1
            j-=1
            continue
        '''
        if (matrix[i][j]==matrix[i][j-1]):
            j-=1
        elif (matrix[i][j]==matrix[i-1][j]):
            i-=1
        else:
            string.append(str1[i-1])
            i-=1
            j-=1
    print(convert(string))
    return string
X = "TGTTGTCGGGGATCAGGTCGCCAAGAGGGGGTTGTGAGCGGCGTCATCACCTCTCTGACCGATCGGCACTAAGGGAGTTATGAGAACACCACGTGGAACTTCACGAACGCTATCACACAGAGTCCCAACGGTAATGGTATTGCGCGCATGTTGTAGACACACCTCGGCCTACCGCACAAATCCTCTTCCATAACGTACGCGGACGGCTCGGCCTAACTCCACAGGGTATCAGCGGAGGAGATGAAAAATATTACTTTCACGGGTCCAGTCAGTGCACGTGCACTAGACTTCAAGTGTGAGGTAAGTTGGCCGCGTGTGTTGTTGATCAGCTCAAGTTAGTTTGTTTACAGAGGCTCAGATTCGGACAACTGGATGAAGTATAGGTATGTGGTGGGGGAGACGAATTCCACTAAGCGAATCAAACTTATTTTATATTTCTTTTTCCACGACTCCTCGGAAATTGGTGCCCACAAGCCTGTAAACTTACAACGAGCGTCCAACGGGTTTAATAGCCGTAGCACAGCACTGACCATCCGTCAAGCACTTAGCCTCAACGGCCAGACCCACTATGAGGGGAAACTGGAGCGTATCAGATGTTGGGATCGATGCAATAGAGAGGTGTGGGTGTTCGCACGCGAAGCCAGCAAGATATTGGTGGTCTTCCCACACTCGCCAGTTCGGCCTGTAGGCACGGTTACAACCTATCGGCGGGGATATACACGGAGCCCCGCCACTGCCAGTTCGGAGACTTCGCGCGGCCACAGGCAACGATCCTCTTGTAATAAGATACTAAGGACGCGCTGGGCAGTTACTATGTCACACCCGCAGGGGACAGGATCAGTTCCCCCGGCGGCTGGCTGAGTGCTTTGAGAGCGTGACGTACGCCCCACGTTAGGCAGGACATAGAGATGTCCTG"
Y = "AGCGCTACCTGTAATCTGACGCTACAGTCCGAAGCGGAATGTATCCGCGATGAGCGACGGCGCCCGTTAGGCTCTCCGCATACAGCCCGAGGCCTAGATACTCCTTGGCTTTGGTATTAAAACATTTGATTTATACACTAATGTCAGTGACCAGTGGTGACTCACATGAGCTAATTAATATCGAGACAGATGAGGAAAACCGACGAAGAGAAAAGCGTAGTTAGAACAATGAGCCCGCCATTTGGTCCCGCAGCTTGATAACGGCGGCATGGTTTTAAGAGTGCGACTGTTATTGTGGGACATCTCCGCTCACGTTAGTTCCGCATTTTAGCAGTGCCCTAGGTCTACTGAGTGTTTCACGGGCGGTTCATGCGGAACTCAGAACTCTGAATTTCGGACGTCTTCAGAAGTGGAAGGGATTTTCGTATGCATCAGAGCACCTTTGACATTCTAGGACAAGCGAACATAAGTTATTGTTACACCAGTTAACTTCGCACCTGAGATTCTCGACCTAAGTGCCTATGCAGACTAGCGAAAAAAGTCTTGTGGTAGTGACAATATGGAGCACAAAGTGAATCATACTATATACCTTAATCTCGTAGTCGCACAGTAGGCGGGTGGAGAAGGCTTAGTCAACGTCCATATCTCGGATCGAACCCGCCGGAACCTCAGCATGACGACCTCGTAGGGGTGGTATCAGCTAAAACGCCGACCCATCAGCGCAATCAAATTAGTTTGTACCTAGCGAGCATCGAAAAACGTTGGCCTTTATTACATCAAACTTAGGAAACAAGGCGGTCGGCTTGGCGAGCGGACGGAGCAGATCTCCGCTTCAGCTGCCTGCCACGGCACATTTCCAACTGGCGCCGTAAAGGATTAGTCCCCGGTGCTGTATCGCAACTTTCGAC"
print(lengthOfLcs(X, Y))
printLcs(X, Y)
