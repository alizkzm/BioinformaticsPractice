import random


def Score(Motifs,t):
    profile = MakeProfile(Motifs,t)
    profileZiped = list(zip(profile["A"],profile["C"],profile["G"],profile["T"]))
    Sum = 0
    for i in range(len(Motifs[0])):
        Sum = Sum + sum(profileZiped[i]) - max(profileZiped[i])
    return Sum


def MakeProfile(Strings,t):
    Profile = {"A":[1]*len(Strings[0]),"C":[1]*len(Strings[0]),"G":[1]*len(Strings[0]),"T":[1]*len(Strings[0])}
    for j in range(len(Strings[0])):
        for i in range(len(Strings)):
            if Strings[i][j] == "A":
                Profile["A"][j] += 1
            if Strings[i][j] == "C":
                Profile["C"][j] +=1
            if Strings[i][j] == "G":
                Profile["G"][j] += 1
            if Strings[i][j] == "T":
                Profile["T"][j] +=1
    return Profile


def StrProb(Pattern , Profile):
    prob = 1
    for i in range(len(Pattern)):
        prob = prob* Profile[Pattern[i]][i]
    return prob


k,t,N = 15,20,2000
dna ="""AGATGGGGTGCGTGTTCTCCAAGTACAGACCCTTAGGACGCCTCTATTTGCCTAATTTGCCTTGCACTGATCAGGTGGAAGGGTAGTATTCGTTAGTTCTGTTGTTATCCTGGTGCTCAAATGGAGGCCAATTGAGATCTCCCCGTTATGGACAGCAACATTGCTGGGCAGCTGTCAAGAATAAGACGCTGCTGGAGTAGCCCCACATCCCATTTGTTAGGTAGTCACTACCAACATTTGTCCAGCGGTTAGTAATAGGGGGAGGCTTTAGGATTAGCAGGTGCCGGTGACGCGGATCTCAGATGGGGTGCGTGT
TCTCCAAGTACAGACCCTTAGGACGCCTCTATTTGCCTAATTTGCCTTGCACTGATCAGGTGGAAGGGTAGTATTCGTTAGTTCTGTTGTTATCCTGGTGCTCAAATGGAGGCCAATTGAGATCTCCCCGTTATGGACAGCAACATTGCTGGGCAGCTGTCAAGAATAAGACGCTGCTGGAGTAGCCCCACATCCCATTTGTTAGGTAGTCACTACCAACATTTGTCCAGCGGTTAGTAATAGGGGGAGGCTTTAGCTACTGCCGTATCACGATTAGCAGGTGCCGGTGACGCGGATCTCAGATGGGGTGCGTGT
TACGGAGGGGTGAGGAGACTTAGCACACCCACAGTTCACATGTCGCTGGGGGTTCAGCTATCAATGGCGGTGTTGGATTAATAATTTTGAACTCCTGTCTGGAGACCGTCGCGAGGTGTACCCCGGCCTACGTCCAATCGAACATGGCATAACGAGAACTTATTGGCCCAAATGACTAAAGGTCAAACACGGATTAAGCACCTTGGCAGTGCCGAATCCGTATCACATAGTTTATGAGCGCGCTCTTTTGTGATAGCCCTGTAAGGTATAATGGGAACCTTTACGACGGTAACTGGGTTCTAGGATCCGATATTG
AAAGACCAGGCCAGTTGCCTACTTAGCGATTCAACTACGATTGAGCAGTTAATCTTAGCGGAGCAAGAATACTTAGCTATATCCGTAGAGCAAATTCGGACTGTTTCCGAATTGAGCAGCAGCGTTAACGTGTAGTAGTGGTGGCCGGTATTTACTGAATGGACTCTCGCCCAGCGGAAGAAACAAGTTCCTGGGAGATTTGAATTATAGATGTAGGACCAAAAGAGAGGGAGTGGAGCGCCACCTCCCAAGCTCCCACACAACCCTCGTCGTGTTATGGTAGTTGAATACTCACCACTATGGGAAACGAACAAC
GATGAAGAAAGAATGAGGCCTTAGCATGTGGTCATCGGTGTAACCACAACTTTCGAACAAGTAACCGTAGGTCTAGCGGGCTGGTTGCCTACCACTATGACATCCCTCGAGCACCTCGAGGCGCAACCTGCATTCTCCTTTGAGAATATGAGACCCACTTAATCAGGTCCATGACTACCGGTATAGTATATTTGGTAAGTTCGTTCTTCAGCACGTCTGATTCAACTAAGAGGTCACACTGCCTATATGCCTTATGCCGAATCTCACTGTTTGCGCAATTCTGGGTAGTACCCCCACCACTATAATGGTATCACT
GACACGACGAACTCCTTGGCCAACAGAACGCTACTAGTGGGCCAATTGTCACTGGTCGGGCAGAAATGGGATATAATAAGGGTTTTTCTGCTGTGGATAACAGAAACTGTCCAGCGATTTTTTAGGTAAAGCGTAAAACTCTACACGTGAGGCATCTTTAGGTATCCGTATCACTGACCGGACATCGACCTATTCAATGATTAACTGTATATTATGCCGAGTTTGCTCCTCTGTCCGAAATCCACAAGTAGACGTACAGTGGTACTCTCGGGAGTGCGAGACCTCAATCCGTTGATTCTACATCATTTAAAACGG
CCTTTATAGTCTGATATGGGGAAATGCCCGGTGAAGGAAATAGCGCAGGCATCGTGGTTAGTTAATACGTGGCTAAGAGGTACGTACACCATAGACCCCTCCTGTATTGAATATGTCTTCGCGCCATAAGCGGGTTAGTTTGCAACCTCGCGAGTTGTTATGTTCCCTTACGTTTCTTATTACTATAGAAGTATCACGGCTGCCACGGGAATTGTGCTTCGCATTAAATTGGAAGAATAGGCCATACATTAGCGCCATCAATCTTTGTAAAAGCGGAAGGGGACCTTAAGTATGGGAATTAGTCGCGCGTTCCCC
CTTCCGTAGCGACTGAGCTCTTACAGGGATGTGTACCCCGACCTACTAGGCTAAGTCCGGGCTATATTACCCTAGATAGTGCGAGGGCCTGCTATAAGCCGTAAACACCCCCGACAAGGAAAGATCTATGGCGGTAAGCCTTAGGGCCGCATCCGACCAATGTATGCCGGGATAGCTAAAATAGAGGTCATTTGTAGCTCAGATTCCTAACTTGTTAAATCGAGTCCGTGGCACCCACTATGGGCTATATATATATCACAAAAGCGAGTAGGAGGGCGATGATCACCTTTCCCGATCCGTTTAGCATGTTACTCG
AAAGTGTGCATGTACCTGGTCGGATGGTGATTTGAATCGTTGAGAGCTTGGTGCGGGATTGTTACCGTCCAAACATACTTGATGAGGCACACTTACCCCGAGTGACGAAGCTGTGCACACCAGGATAACCACTTGGTGATAGACGCGAAAGGCATGTTGCAACTATCTACAACTATGTGGCGTCTGAGTAAGCTAGACAGGTGTCCGAAGCGTTGTTCGTCGCGGTTTCTCACGCGTGAGGTGTCCCCAGTTCAGATGGAGTCCCCAAGGATCCTCGCCGTCATGATACCAGACATAATATATCCGTATCTGAGG
CTAAGGTCTCGAAGGTATTGTACATTGCTAACGAGCCTTGCGACCATTGAAAATAAGACGACTCACACTCTACAAGCGGCCAGGTGACCCCTCTTTCCTCAGGCAGTTTACTGTTACTATTAACGTATCACGCTCGAATGCCACTTCATGGTCCGCCGAACATTCGGACTCGTGAAGGCGGCGCACCTGGCTACCGTCGTCATTAGAGCACGCCTACGAGAATAGATGGGTCGGAGAGTCGAATCCAACCATGCGCTTATCGCGTCCTCCGCTAGCGGACCCAACGATGCGGGCTCATAACGGTAACCAGTTAAC
AAGTACAACCTCAGGCGCGCAGGCTTCATGATTCTAACTTTGACGTCTGATACGGTGGGCTGACTGTCCCGAAGCAAGACGTCGTCATGGCCGACCAGAGTCATTGGAGAATCAGGTTGTTTCGCTAGGACGGGCTTTATAACTGGGCTATAACACCGGCTTTAATAAGAACCCTAAGCGGTACGAAGAATCGTCGCTATTCGATCACCAACTGCTATATCCGCTGCACAAGATACGCGCTCGGGACTCTACAGGTCATCCGTCCTTGTATAAAAATGCCTTGGGCCTGGACCGCGCAACGTAGGCTCCTCTACC
GATTTCATGAGCACCTATTGGCAAACTCCAAGCCATACACAGAGTCCCCCCAAGACCTATATCCAGGTCACAGCCTGCTTCTGCATGTTGAGTGCTTAACTCGCTTTCTTAGGCTGAATTAGTCCGATGGGTTCTCCCTAAAAATTTGGGCACACCACGCAAGCACCCCTCACCTGAATTTCCATCCCGTTGGTAGATCGCGCCTCATGAAAATGTTCCTAGTGTCATAGCAGGACTTGTCCTTTGGGTTATTGATACAATCGTTAATCCCATCCGGTATGCCAGTGCGACGACGGGCGCGTAAAGTCAGATTTT
TGCGCAAAGGACGCGCGTGCGGGCATACAGCTTGAGCGCTTAAGGTTTGCGAGGAAGCGCTTCTACCGCGATAGGGCTTGCGAACACGATTTGTAGTCATAAAGTTGTTATATGGTTCTATTCGGCCAGCATAACTTGTTCTGGGACACTTAGCCGAGCCAGCGAGTACAATTATTCGGCCTACACCAACCAAGGGTGCCGACAGCACTAACTTTCTACGTTGTAACAGCGCTTTAAAAATCACACGAAAGACTCGGGGGAGACCAAAACGTTGTAAGATATTGACTATATCCGTCCAACGCAGAGTGTTGTCAG
ACCGTTATCTTCCGATCACTGCTTGGTTAATCCTATATAAATATCACCCTAAACTCACGCGTACAGTTTCTCGTAAGCCTAGGATCTTCGTCCAAATGATCGCTCACCCTGGTGACTTTCGATACTTATTGGTATCTCTCTTTGTTGTTCGTAAAGAGGGGTGTGTTCAACAGGGGCACCTGAGCGCGCTTACTTACAATGCAGAGCCACGTGCGGTCTAAGGCCCTCCTCTCGTTACAGGTCCGTCTACTGTGGGCAGGACTGCCAATGCGTCTCTGTAGGACTATACCGGGTCGTCTGATTTAGCGGTAGTCC
CGGTAAAAAATTTGGAAGTCAGTGCGCACCTGCAGCCTATTACGTCCGCCCACGATGTGTTACGATCTACAGGTGGTAAACTCTCTTGTTGTAGAGTACTCACGAAGATGACGGCCAGGAGCAGAATCAAGCCTTCGAAGGACCACGCGTCTGTCAATTGGTTACATAAGGCGGGCTTTCGATTTGTTGATGGATAGTTGCACCTGTTCAGGGGGCAAGCTCATGATGACTAATTACCTTCACGCAACAGCGTTACGCCCTGAAAAGGGACGGAAGGCGATTCGTGAACCCTATCAGCGTATCACAGGCAATGTT
GGGCCGCGCAACGGTGGCAATGGGCTAACGACTGGCACATTAATTGTTTGGCTCAGCAAAACCCAGTTGTTCATAGACTAATAAGTTTGTGGCGAAATTTGTTTCCCTGGCTGGGTCCGAAGTCTCGGGGTATTCGTGTGGGCTAGGGCTGATACTCAGGTTCTCATTGCCGTGAAACTCCTTCGTCCGTATCACCGGCAATAAACTTGCACTCAAAATCCCAACGTTTTTAAAGCGGTGACAACATCATTATCGAGTTTTCACACTTATTAAGGCTTGCCATGGATGGTCTACCCTATGGCTGCGCCGGCTTGT
CGAGCATCAGCACATGGCCGTCTCTTTCGAATTATCCATATTATGTGTGGTTGGAACGTTTGGGCGGGTCAGAGGGGCTAGCTCGGTTGGGCATGGACTGGGCCTCCCTATTAGCCAACATTTGAATACACCTGGGAATCCTCTATATCATAATCACCGAGAGTCTTCACTCAACAGGCGGGGGCTCTCCGCCGCCTACAAGCTGATTTTTAGGAACGTATGGCGACCATTTGTCGGCCTACACATTAGGCGAGTTAGTGATCGTTTAGCTGGTGCGGTCACGAGGGCGCCCTGTCGGTTGTGTGGCACCCACAT
TACGTGCCACCTCGCCCTTGGTTAAGTTCTCGAACCCTAGGCCTTAACCTGTTAGCACCAAGTTCAGCCGTGTCCGCACTCGAGATCCAATAGGTCATCAACTCCAACCGCGTAATATCCGTATCATTAGCCGGTCAGAAACCTATAAAATAATGAGAGAAGTTACAGTGATATTGTAAGTTAGGCTGAAGGTTCTTCAGTCTCCCTAACATATGTTCGTCCTGTCTCTCGGCAACCATTTTTGGGGCTAAACTGCATAGCCCTGGGCTTGGCGGATCCACGAACGTTTGACTATTTTGGCATCCGTTGTTTGAG
TCGTTGTCCCTTCATTTAGCCTAATAGAGTCATCTCGGTAACCTCTGGTGTCCAGGTTATTTTCGATTTGTACTGCCGCATGCTATTGCCCCTAGCGGATATACGTTGCTAACTGGCAATCAACGAAGATTTACGCTCTATATCCGTATTTTAATATCAATCGACTACTGCACCGTGCTCTTGGTAAGCGTCAGGTGTGGGGTTATCCCCCTGTCTTCGATGACGGGTCCAAAAATTCAGTCCTACAAATTACATTACATTTCGTGGTCTCTGCGTCTGAGGCAATCCCTGCGTGCGCAAGACGGAGCAGAATGG
ATTGCAGTAACTTGGTATACCCACATGCGCCTTCTTGAGCGCCTCCTACCTACTGAACCTCAAGCGGACACCGTCAGCGCCGCTATCATGGAGCTGCGTTGATTATTTAACTGTAAATATTATGGCTGTACTATCCAAGCGGCGTTACATCGATGTATGTCGTGTGCCAGGGGATAATTTGTAGTGGGACTCGTCGCCAGGTTGATCCGGCACAGAGCCGCACGAGCCTACATATGGCAAACAGTAGGGGGTGGTACTCGACAAAGGGATACGGTCCACCTCGTACTACCACTAGCGCCGTATCACGAGCACACT"""
dna = dna.split("\n")
FinalMotifs = []
FinalScores = []
for Start in range(20):
    Motifs = ["" for i in range(t)]
    for i in range(t):
        startIndex = random.randint(0, len(dna[0])-k)
        Motifs[i] = dna[i][startIndex:startIndex+k]
    BestMotifs = Motifs


    for j in range(N):
        Probabilities = []
        i = random.randint(0,t-1)
        tempMotifs = [x for l, x in enumerate(Motifs) if l != i]
        profile = MakeProfile(tempMotifs,t)
        for l in range(len(dna[i])-k+1):
            Probabilities.append(StrProb(dna[i][l:l+k] , profile) )
        population = [l for l in range(len(dna[i])-k+1 )]
        SelectedIndex = random.choices(population ,Probabilities)
        index = SelectedIndex[0]
        Motifs[i] = dna[i][index:index+k]
        if Score(Motifs,t) < Score(BestMotifs,t):
            BestMotifs = Motifs
    FinalMotifs.append(BestMotifs)
    FinalScores.append(Score(BestMotifs,t))

minIndex = FinalScores.index(min(FinalScores))
MotifsToPrint = FinalMotifs[minIndex]
for i in range(len(MotifsToPrint)):
    print(MotifsToPrint[i])